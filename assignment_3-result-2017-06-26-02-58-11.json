{
    "tests": [
        {
            "output": {
                "points_available": 5,
                "message": "MH_sampling failed due to error: EXCEPTION IN (run.py, LINE 722 \"sample = pn.MH_sampler(game_net, list(initial_state)) # returns a tuple\"): ",
                "return_type_check": true,
                "points_awarded": 0
            },
            "description": "(2d). Test for MH convergence. (5 points)"
        },
        {
            "output": {
                "points_available": 10,
                "message": "When provided no initial state, MH should generate a state from uniform distribution. \nMH_sampling failed due to error: EXCEPTION IN (run.py, LINE 653 \"test_sample = pn.MH_sampler(game_net, list(initial_state))\"): ",
                "return_type_check": true,
                "points_awarded": 0
            },
            "description": "(2d). Test that MH is implemented correctly. (10 points)"
        },
        {
            "output": {
                "points_available": 20,
                "message": "Sampling comparison failed to execute due to error: \nEXCEPTION IN (run.py, LINE 806 \"Gibbs_convergence, MH_convergence, Gibbs_count, MH_count, MH_rejection_count = pn.compare_sampling(sports_net,initial_state, delta)\"): \nSampling comparison failed to execute due to error: \nEXCEPTION IN (run.py, LINE 856 \"sampling_choice, factor = pn.sampling_question()\"): list index out of range\n",
                "return_type_check": true,
                "points_awarded": 0
            },
            "description": "(2e). Testing compare_sampling. (20 points)"
        },
        {
            "output": {
                "points_available": 5,
                "message": "",
                "return_type_check": true,
                "points_awarded": 5
            },
            "description": "(2b). Test that the posterior is calculated correctly. (5 points)"
        },
        {
            "output": {
                "points_available": 5,
                "message": "",
                "return_type_check": true,
                "points_awarded": 5
            },
            "description": "(2c). Test for Gibbs convergence (5 points)"
        },
        {
            "output": {
                "points_available": 10,
                "message": "",
                "return_type_check": true,
                "points_awarded": 10
            },
            "description": "(2c). Test that Gibbs is implemented correctly. (10 points)"
        },
        {
            "output": {
                "points_available": 10,
                "message": "",
                "return_type_check": true,
                "points_awarded": 10
            },
            "description": "(1c). Test for the inference task for various power plant situations: marginal alarm, gauge, and temperature. (10 points)"
        },
        {
            "output": {
                "points_available": 15,
                "message": "",
                "return_type_check": true,
                "points_awarded": 15
            },
            "description": "(1b). Test for the probability distribution of the power plant Bayesian network. (15 points)"
        },
        {
            "output": {
                "points_available": 10,
                "message": "",
                "return_type_check": true,
                "points_awarded": 10
            },
            "description": "(1a). Test for the structure of the power plant Bayesian network. (10 points)"
        },
        {
            "output": {
                "points_available": 10,
                "message": "",
                "return_type_check": true,
                "points_awarded": 10.0
            },
            "description": "(2a). Test that the sports network is set up correctly. (10 points)"
        }
    ]
}